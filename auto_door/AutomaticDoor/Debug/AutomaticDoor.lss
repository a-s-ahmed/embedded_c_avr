
AutomaticDoor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  000001da  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d60  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c42  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  00001cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000201c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000586  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f4  00000000  00000000  00002612  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002706  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ed       	ldi	r30, 0xDA	; 218
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 31       	cpi	r26, 0x1E	; 30
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	36 d0       	rcall	.+108    	; 0x17c <main>
 110:	62 c0       	rjmp	.+196    	; 0x1d6 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <initialize_usart_serial>:
#define BAUD 0x33


void initialize_usart_serial(void){
    //set baud rate to 19200 and init our serial comms
    UCSR0B = (1<<TXEN0);
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    UBRR0L = BAUD;
 120:	83 e3       	ldi	r24, 0x33	; 51
 122:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 126:	08 95       	ret

00000128 <usart_send>:
}

void usart_send(unsigned char letter){
    //send letter across usart
    while (!(UCSR0A & (1<<UDRE0)));
 128:	e0 ec       	ldi	r30, 0xC0	; 192
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	95 ff       	sbrs	r25, 5
 130:	fd cf       	rjmp	.-6      	; 0x12c <usart_send+0x4>
    UDR0 = letter;
 132:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 136:	08 95       	ret

00000138 <capture_period>:
}

unsigned int capture_period()
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
  	unsigned int t;
  	
    	
    PORTD = 0xFF;	
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	8b b9       	out	0x0b, r24	; 11
    TCCR1A = 0;
 140:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    TIFR1 = (1<<ICF1);		/* clear input capture flag */
 144:	80 e2       	ldi	r24, 0x20	; 32
 146:	86 bb       	out	0x16, r24	; 22
    TCCR1B = 0x41;			/* capture on rising edge */ 
 148:	81 e4       	ldi	r24, 0x41	; 65
 14a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	
  	unsigned char b[20] = "b";
  	unsigned char h[20] = "h"; // op tells us we've reached input
  	
    while ((TIFR1&(1<<ICF1)) == 0);  /* monitor for capture*/
 14e:	b5 9b       	sbis	0x16, 5	; 22
 150:	fe cf       	rjmp	.-4      	; 0x14e <capture_period+0x16>
  	
  	usart_send(b[0]);
 152:	82 e6       	ldi	r24, 0x62	; 98
 154:	e9 df       	rcall	.-46     	; 0x128 <usart_send>
    t = ICR1;			
 156:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 15a:	d0 91 87 00 	lds	r29, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    TIFR1 = (1<<ICF1);		/* clear capture flag */
 15e:	80 e2       	ldi	r24, 0x20	; 32
 160:	86 bb       	out	0x16, r24	; 22

    while ((TIFR1&(1<<ICF1)) == 0);  /* monitor for next rising
 162:	b5 9b       	sbis	0x16, 5	; 22
 164:	fe cf       	rjmp	.-4      	; 0x162 <capture_period+0x2a>
                    edge capture */
  	usart_send(h[0]); //we know we've finished capture
 166:	88 e6       	ldi	r24, 0x68	; 104
 168:	df df       	rcall	.-66     	; 0x128 <usart_send>
	
    t = ICR1 - t;  			/* period= recent capture-
 16a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 16e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
                      previous capture */
  return t;
}
 172:	8c 1b       	sub	r24, r28
 174:	9d 0b       	sbc	r25, r29
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <main>:


int main (void)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	6e 97       	sbiw	r28, 0x1e	; 30
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
	
	DDRD &=!(1<<PD6);
 190:	8a b1       	in	r24, 0x0a	; 10
 192:	1a b8       	out	0x0a, r1	; 10
	initialize_usart_serial();
 194:	bf df       	rcall	.-130    	; 0x114 <initialize_usart_serial>
  	unsigned char str[30] = "Hello World";
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	e0 e0       	ldi	r30, 0x00	; 0
 19a:	f2 e0       	ldi	r31, 0x02	; 2
 19c:	de 01       	movw	r26, r28
 19e:	11 96       	adiw	r26, 0x01	; 1
 1a0:	01 90       	ld	r0, Z+
 1a2:	0d 92       	st	X+, r0
 1a4:	8a 95       	dec	r24
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x24>
 1a8:	fe 01       	movw	r30, r28
 1aa:	3d 96       	adiw	r30, 0x0d	; 13
 1ac:	82 e1       	ldi	r24, 0x12	; 18
 1ae:	df 01       	movw	r26, r30
 1b0:	1d 92       	st	X+, r1
 1b2:	8a 95       	dec	r24
 1b4:	e9 f7       	brne	.-6      	; 0x1b0 <main+0x34>
 1b6:	8e 01       	movw	r16, r28
 1b8:	0f 5f       	subi	r16, 0xFF	; 255
 1ba:	1f 4f       	sbci	r17, 0xFF	; 255
 1bc:	7e 01       	movw	r14, r28
 1be:	be e0       	ldi	r27, 0x0E	; 14
 1c0:	eb 0e       	add	r14, r27
 1c2:	f1 1c       	adc	r15, r1
    unsigned char strLength = 13;
    unsigned char i = 0;
  while(i<13){
    usart_send(str[i++]);
 1c4:	f8 01       	movw	r30, r16
 1c6:	81 91       	ld	r24, Z+
 1c8:	8f 01       	movw	r16, r30
 1ca:	ae df       	rcall	.-164    	; 0x128 <usart_send>
	DDRD &=!(1<<PD6);
	initialize_usart_serial();
  	unsigned char str[30] = "Hello World";
    unsigned char strLength = 13;
    unsigned char i = 0;
  while(i<13){
 1cc:	0e 15       	cp	r16, r14
 1ce:	1f 05       	cpc	r17, r15
    usart_send(str[i++]);
  }

    while (1){
      capture_period();
 1d0:	c9 f7       	brne	.-14     	; 0x1c4 <main+0x48>
 1d2:	b2 df       	rcall	.-156    	; 0x138 <capture_period>
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <main+0x56>

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
